#!/bin/bash

# ===================================================
# üöÄ GPROD Docker Manager
# ===================================================
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./docker-manager.sh <–∫–æ–Ω—Ç—É—Ä> <–∫–æ–º–∞–Ω–¥–∞> [--build]
#
# –ö–æ–Ω—Ç—É—Ä—ã:
#   dev, stage, prod, reference
#
# –ö–æ–º–∞–Ω–¥—ã:
#   up     - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
#   down   - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
#   restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
#   logs   - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
#   ps     - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
#
# –ü—Ä–∏–º–µ—Ä—ã:
#   ./docker-manager.sh dev up        # –ó–∞–ø—É—Å—Ç–∏—Ç—å development –∫–æ–Ω—Ç—É—Ä
#   ./docker-manager.sh stage down    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å staging –∫–æ–Ω—Ç—É—Ä
#   ./docker-manager.sh prod restart  # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å production –∫–æ–Ω—Ç—É—Ä
#   ./docker-manager.sh reference up  # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é reference –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
  echo -e "\n${WHITE}${BOLD}$1${NC}\n"
}

print_success() {
  echo -e "${GREEN}‚úì $1${NC}"
}

print_error() {
  echo -e "${RED}‚úó $1${NC}"
}

print_info() {
  echo -e "${BLUE}‚Ñπ $1${NC}"
}

print_step() {
  echo -e "${PURPLE}‚Üí $1${NC}"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../" && pwd)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [ $# -lt 2 ]; then
  print_header "üöÄ GPROD Docker Manager"
  print_error "–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç—É—Ä –∏/–∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞"
  print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./docker-manager.sh <–∫–æ–Ω—Ç—É—Ä> <–∫–æ–º–∞–Ω–¥–∞>"
  print_info "–ö–æ–Ω—Ç—É—Ä—ã: dev, stage, prod, reference"
  print_info "–ö–æ–º–∞–Ω–¥—ã: up, down, restart, logs, ps"
  exit 1
fi

ENV=$1
ACTION=$2
BUILD=false

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [ "$3" = "--build" ]; then
  BUILD=true
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ docker-compose –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç—É—Ä–∞
case $ENV in
  dev|development)
    COMPOSE_FILE="$SCRIPT_DIR/docker-compose.dev.yml"
    ENV_NAME="development"
    PORT=3008
    ;;
  stage|staging)
    COMPOSE_FILE="$SCRIPT_DIR/docker-compose.stage.yml"
    ENV_NAME="staging"
    PORT=3003
    ;;
  prod|production)
    COMPOSE_FILE="$SCRIPT_DIR/docker-compose.prod.yml"
    ENV_NAME="production"
    PORT=3007
    ;;
  reference)
    COMPOSE_FILE="$SCRIPT_DIR/docker-compose.reference.yml"
    ENV_NAME="reference (minimal)"
    PORT=3000
    ;;
  *)
    print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç—É—Ä: $ENV"
    print_info "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Ç—É—Ä—ã: dev, stage, prod, reference"
    exit 1
    ;;
esac

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ docker-compose
if [ ! -f "$COMPOSE_FILE" ]; then
  print_error "–§–∞–π–ª $COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω!"
  exit 1
fi

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
case "$ACTION" in
  up)
    print_header "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞ $ENV_NAME"
    
    if [ "$BUILD" = true ]; then
      print_step "–ó–∞–ø—É—Å–∫–∞–µ–º —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π..."
      cd $PROJECT_ROOT && docker compose -f "$COMPOSE_FILE" up -d --build
    else
      print_step "–ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏..."
      cd $PROJECT_ROOT && docker compose -f "$COMPOSE_FILE" up -d
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if [ $? -eq 0 ]; then
      print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã"
      
      # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
      print_header "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
      print_info "API: http://localhost:$PORT/api/v1"
      print_info "Swagger: http://localhost:$PORT/api/v1/docs"
      
      # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
      case $ENV_NAME in
        staging)
          print_info "Prometheus: http://localhost:9090"
          print_info "Grafana: http://localhost:3100"
          ;;
        production)
          print_info "Grafana: http://localhost:3500"
          ;;
      esac
      
      # –í—ã–≤–æ–¥ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
      print_step "–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
      docker ps --filter "name=gprod-*" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    else
      print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
    ;;
    
  down)
    print_header "üì¶ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞ $ENV_NAME"
    cd $PROJECT_ROOT && docker compose -f "$COMPOSE_FILE" down
    
    if [ $? -eq 0 ]; then
      print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
      print_error "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
    ;;
    
  restart)
    print_header "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞ $ENV_NAME"
    cd $PROJECT_ROOT && docker compose -f "$COMPOSE_FILE" down
    
    if [ "$BUILD" = true ]; then
      print_step "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π..."
      cd $PROJECT_ROOT && docker compose -f "$COMPOSE_FILE" up -d --build
    else
      print_step "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏..."
      cd $PROJECT_ROOT && docker compose -f "$COMPOSE_FILE" up -d
    fi
    
    if [ $? -eq 0 ]; then
      print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
      
      # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
      print_header "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
      print_info "API: http://localhost:$PORT/api/v1"
      print_info "Swagger: http://localhost:$PORT/api/v1/docs"
      
      # –í—ã–≤–æ–¥ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
      print_step "–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
      docker ps --filter "name=gprod-*" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    else
      print_error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
    ;;
    
  logs)
    print_header "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç—É—Ä–∞ $ENV_NAME"
    cd $PROJECT_ROOT && docker compose -f "$COMPOSE_FILE" logs -f
    ;;
    
  ps)
    print_header "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∫–æ–Ω—Ç—É—Ä–∞ $ENV_NAME"
    cd $PROJECT_ROOT && docker compose -f "$COMPOSE_FILE" ps
    ;;
    
  *)
    print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $ACTION"
    print_info "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã: up, down, restart, logs, ps"
    exit 1
    ;;
esac

print_info "üí° –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π gybernaty-infra"
print_info "    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/split-infrastructure.md"

exit 0 