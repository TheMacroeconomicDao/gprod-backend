name: CI/CD Pipeline

on:
  push:
    branches: [main]
  schedule:
    - cron: '*/10 * * * *' # каждые 10 минут

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - run: pnpm install
      - run: pnpm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - run: pnpm install
      - run: pnpm run test
      - run: pnpm run test:e2e

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - run: docker build -t ghcr.io/themacroeconomicdao/gprod-backend:latest .
      - run: docker push ghcr.io/themacroeconomicdao/gprod-backend:latest

  migrate:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - run: pnpm install
      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
      - name: Run Prisma Migrate
        run: kubectl exec deploy/gprod-backend -- npx prisma migrate deploy || echo "Migration step skipped (no pod yet)"

  deploy:
    runs-on: ubuntu-latest
    needs: migrate
    steps:
      - uses: actions/checkout@v4
      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
      - uses: azure/setup-helm@v4
      - name: Deploy with Helm
        run: |
          helm upgrade --install gprod-backend ./helm/gprod-backend \
            --namespace gprod \
            --values ./helm/gprod-backend/values-dev.yaml \
            --set image.tag=latest

  healthcheck:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
      - name: Wait for rollout
        run: kubectl rollout status deployment/gprod-backend -n gprod --timeout=120s
      - name: Healthcheck
        run: |
          for i in {1..10}; do
            STATUS=$(curl -s https://api.dev.gprod.build.infra.gyber.org/api/v1/health | jq -r .status)
            if [[ "$STATUS" == "ok" ]]; then exit 0; fi
            sleep 10
          done
          exit 1
      - name: Telegram Notify (Success)
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ✅ Деплой успешен!
            Репозиторий: ${{ github.repository }}
            Ветка: ${{ github.ref_name }}
            Коммит: ${{ github.sha }}
            Автор: ${{ github.actor }}
            Подробнее: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Telegram Notify (Failure)
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ❌ Ошибка деплоя!
            Репозиторий: ${{ github.repository }}
            Ветка: ${{ github.ref_name }}
            Коммит: ${{ github.sha }}
            Автор: ${{ github.actor }}
            Подробнее: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  rollback:
    if: failure() && needs.healthcheck.result == 'failure'
    runs-on: ubuntu-latest
    needs: healthcheck
    steps:
      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
      - uses: azure/setup-helm@v4
      - name: Rollback Helm release
        run: helm rollback gprod-backend 1 --namespace gprod
      - name: Telegram Notify (Rollback)
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ⚠️ Выполнен rollback!
            Репозиторий: ${{ github.repository }}
            Ветка: ${{ github.ref_name }}
            Подробнее: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  periodic-healthcheck:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Healthcheck
        id: health
        run: |
          for i in {1..5}; do
            RESPONSE=$(curl -s https://api.dev.gprod.build.infra.gyber.org/api/v1/health)
            STATUS=$(echo "$RESPONSE" | jq -r .status)
            echo "::set-output name=response::$RESPONSE"
            if [[ "$STATUS" == "ok" ]]; then exit 0; fi
            sleep 10
          done
          exit 1
      - name: Telegram Notify (Failure)
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ❌ Периодический healthcheck не прошёл!
            Репозиторий: ${{ github.repository }}
            Подробнее: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Ответ healthcheck: ${{ steps.health.outputs.response }}