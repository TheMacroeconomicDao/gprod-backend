#!/bin/bash

# ===================================================
# üöÄ GPROD Automation Script
# ===================================================
# –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–µ–∫—Ç–∞
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./automation/run.sh <–∫–æ–º–∞–Ω–¥–∞> [–∫–æ–Ω—Ç—É—Ä]
#
# –ö–æ–º–∞–Ω–¥—ã:
#   env         - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
#   run         - –∑–∞–ø—É—Å–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ + –∑–∞–ø—É—Å–∫ Docker)
#   stop        - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
#   logs        - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
#   test        - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
#   interactive - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
#
# –ö–æ–Ω—Ç—É—Ä—ã:
#   dev, stage, prod, reference

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
  echo -e "\n${WHITE}${BOLD}$1${NC}\n"
}

print_success() {
  echo -e "${GREEN}‚úì $1${NC}"
}

print_error() {
  echo -e "${RED}‚úó $1${NC}"
}

print_info() {
  echo -e "${BLUE}‚Ñπ $1${NC}"
}

print_step() {
  echo -e "${PURPLE}‚Üí $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
show_progress() {
  local progress=$1
  local total=$2
  local width=40
  local percentage=$((progress * 100 / total))
  local completed=$((progress * width / total))
  local remaining=$((width - completed))
  
  printf "[${GREEN}"
  printf "%${completed}s" | tr ' ' '‚ñà'
  printf "${NC}%${remaining}s] %d%%" | tr ' ' '‚ñë' "$percentage"
  echo -ne "\r"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
check_interactive_deps() {
  if ! command -v tput &> /dev/null; then
    print_error "–£—Ç–∏–ª–∏—Ç–∞ 'tput' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç 'ncurses'."
    return 1
  fi
  return 0
}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—É—Å–∫–æ–≤
HISTORY_FILE="$PROJECT_ROOT/.run_history"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
save_to_history() {
  local env=$1
  local rebuild=$2
  echo "ENV=$env" > "$HISTORY_FILE"
  echo "REBUILD=$rebuild" >> "$HISTORY_FILE"
  echo "TIMESTAMP=$(date +%s)" >> "$HISTORY_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
load_from_history() {
  if [ -f "$HISTORY_FILE" ]; then
    source "$HISTORY_FILE"
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    LAST_ENV=$ENV
    LAST_REBUILD=$REBUILD
    LAST_TIMESTAMP=$TIMESTAMP
  else
    LAST_ENV="dev"
    LAST_REBUILD="false"
    LAST_TIMESTAMP=0
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç—É—Ä–∞
show_env_menu() {
  print_header "üöÄ GPROD –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫"
  echo -e "${CYAN}–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—É—Ä:${NC}"
  echo -e "  ${YELLOW}1)${NC} Development (dev) - –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
  echo -e "  ${YELLOW}2)${NC} Staging (stage) - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
  echo -e "  ${YELLOW}3)${NC} Production (prod) - –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
  echo -e "  ${YELLOW}4)${NC} Reference - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
  echo -e "\n${CYAN}–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:${NC}"
  echo -e "  ${YELLOW}q)${NC} –í—ã—Ö–æ–¥"
  echo -e "\n${CYAN}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç—É—Ä–∞ (1-4) –∏–ª–∏ q –¥–ª—è –≤—ã—Ö–æ–¥–∞:${NC} "
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
show_mode_menu() {
  local has_images=$1
  
  print_header "üöÄ –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞"
  
  if [ "$has_images" = true ]; then
    echo -e "${CYAN}–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:${NC}"
    echo -e "  ${YELLOW}a)${NC} –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–∑—ã)"
    echo -e "  ${YELLOW}b)${NC} –° –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤)"
    echo -e "\n${CYAN}–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä (a/b):${NC} "
  else
    print_info "–ì–æ—Ç–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã Docker –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–±–æ—Ä–∫–∞."
    echo -e "\n${CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC}"
    read -r
    return 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 1, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–∞–∑–æ–≤ Docker
check_docker_images() {
  local env=$1
  local image_name="gprod-new-backend-app"
  local image_tag="latest"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–∑–∞
  print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–∞–∑–æ–≤ Docker..."
  
  # –ò—Å–ø–æ–ª—å–∑—É–µ–º docker image ls —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  if docker image ls "$image_name:$image_tag" --format "{{.Repository}}:{{.Tag}}" | grep -q "$image_name:$image_tag"; then
    print_success "–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–∑ $image_name:$image_tag"
    return 0  # –û–±—Ä–∞–∑ –Ω–∞–π–¥–µ–Ω
  else
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ docker image inspect –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    if docker image inspect "$image_name:$image_tag" &>/dev/null; then
      print_success "–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–∑ $image_name:$image_tag"
      return 0  # –û–±—Ä–∞–∑ –Ω–∞–π–¥–µ–Ω
    else
      print_info "–û–±—Ä–∞–∑ $image_name:$image_tag –Ω–µ –Ω–∞–π–¥–µ–Ω"
      return 1  # –û–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω
    fi
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_docker_volumes() {
  local env=$1
  local container_name="gprod-app-${env}"
  local db_volume_name="gprod-new-backend_pgdata_${env}"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–º–∞ –¥–ª—è PostgreSQL
  print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–º–æ–≤ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Docker..."
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–º–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  if docker volume ls | grep -q "$db_volume_name"; then
    print_success "–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–º –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if docker ps -a | grep -q "$container_name"; then
      print_success "–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name"
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      if docker ps | grep -q "$container_name"; then
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name –∑–∞–ø—É—â–µ–Ω"
        return 0  # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω, –∑–Ω–∞—á–∏—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
      else
        print_info "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        print_step "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
        docker start "$container_name" &>/dev/null
        if [ $? -eq 0 ]; then
          print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
          return 0  # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
        else
          print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name"
          return 1  # –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        fi
      fi
    else
      print_info "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name –Ω–µ –Ω–∞–π–¥–µ–Ω"
      return 1  # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    fi
  else
    print_info "–¢–æ–º –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"
    return 1  # –¢–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment_ready() {
  local env=$1
  local images_ready=false
  local volumes_ready=false
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–∑–æ–≤
  if check_docker_images "$env"; then
    images_ready=true
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–º–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  if check_docker_volumes "$env"; then
    volumes_ready=true
  fi
  
  # –ï—Å–ª–∏ –∏ –æ–±—Ä–∞–∑—ã, –∏ —Ç–æ–º—ã –≥–æ—Ç–æ–≤—ã, —Ç–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
  if [ "$images_ready" = true ] && [ "$volumes_ready" = true ]; then
    print_success "–û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ"
    return 0  # –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
  else
    print_info "–û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ"
    return 1  # –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
run_interactive() {
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  check_interactive_deps || return 1
  
  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—É—Å–∫–æ–≤
  load_from_history
  
  # –®–∞–≥ 1: –í—ã–±–æ—Ä –∫–æ–Ω—Ç—É—Ä–∞
  show_env_menu
  read -r env_choice
  
  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–∞
  env=""
  case $env_choice in
    1)
      env="dev"
      ;;
    2)
      env="stage"
      ;;
    3)
      env="prod"
      ;;
    4)
      env="reference"
      ;;
    q)
      print_info "–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
      return 0
      ;;
    *)
      print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–Ω—Ç—É—Ä–∞"
      return 1
      ;;
  esac
  
  # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–±—Ä–∞–∑—ã, —Ç–æ–º—ã, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
  print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  environment_ready=false
  if check_environment_ready "$env"; then
    environment_ready=true
  fi
  
  # –®–∞–≥ 3: –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ)
  rebuild=false
  
  if [ "$environment_ready" = true ]; then
    show_mode_menu "$environment_ready"
    read -r mode_choice
    
    case $mode_choice in
      a)
        rebuild=false
        ;;
      b)
        rebuild=true
        ;;
      *)
        print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞"
        return 1
        ;;
    esac
  else
    # –ï—Å–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ, —Ç–æ –Ω—É–∂–Ω–∞ —Å–±–æ—Ä–∫–∞
    rebuild=true
    print_info "–û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ. –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞."
    echo -e "\n${CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC}"
    read -r
  fi
  
  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –∏—Å—Ç–æ—Ä–∏—é
  save_to_history "$env" "$rebuild"
  
  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç
  print_header "üöÄ –ó–∞–ø—É—Å–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è: $env"
  print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
  bash "$ENV_MANAGER" "$env" --silent --docker
  
  print_step "–ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
  
  # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Docker
  docker_args=""
  
  # –ï—Å–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∏ –Ω–µ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º override —Ñ–∞–π–ª
  if [ "$environment_ready" = true ] && [ "$rebuild" = false ]; then
    print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    docker_args="-f docker/docker-compose.$env.yml -f docker/docker-compose.$env.override.yml"
  elif [ "$rebuild" = true ]; then
    print_info "–†–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    docker_args="--build"
  fi
  
  # –ó–∞–ø—É—Å–∫–∞–µ–º Docker —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  if [ -n "$docker_args" ]; then
    bash "$DOCKER_MANAGER" "$env" up $docker_args
  else
    bash "$DOCKER_MANAGER" "$env" up
  fi
  
  return 0
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../" && pwd)"
ENV_MANAGER="$SCRIPT_DIR/env/env-manager.sh"
DOCKER_MANAGER="$PROJECT_ROOT/docker/docker-manager.sh"
TEST_SCRIPT="$SCRIPT_DIR/scripts/run-tests.sh"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [ $# -lt 1 ]; then
  print_header "üöÄ GPROD Automation Script"
  print_error "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞"
  print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./automation/run.sh <–∫–æ–º–∞–Ω–¥–∞> [–∫–æ–Ω—Ç—É—Ä]"
  print_info "–ö–æ–º–∞–Ω–¥—ã: env, run, stop, logs, test"
  print_info "–ö–æ–Ω—Ç—É—Ä—ã: dev, stage, prod, reference"
  exit 1
fi

COMMAND=$1
ENV=${2:-dev}  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º dev

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–ª–∞–≥–∞ --rebuild
REBUILD=false
for arg in "$@"; do
  if [ "$arg" = "--rebuild" ]; then
    REBUILD=true
    break
  fi
done

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
case $COMMAND in
  env)
    print_header "üåü –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è: $ENV"
    bash "$ENV_MANAGER" "$ENV" "$3" "$4"
    ;;
  run)
    print_header "üöÄ –ó–∞–ø—É—Å–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è: $ENV"
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    bash "$ENV_MANAGER" "$ENV" --silent --docker
    
    print_step "–ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ --rebuild
    if [ "$REBUILD" = true ]; then
      print_info "–†–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
      bash "$DOCKER_MANAGER" "$ENV" up --build
    else
      bash "$DOCKER_MANAGER" "$ENV" up
    fi
    ;;
  stop)
    print_header "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è: $ENV"
    bash "$DOCKER_MANAGER" "$ENV" down
    ;;
  logs)
    print_header "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: $ENV"
    bash "$DOCKER_MANAGER" "$ENV" logs
    ;;
  test)
    print_header "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
    if [ "$ENV" = "unit" ] || [ "$ENV" = "e2e" ]; then
      # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Ç–∏–ø —Ç–µ—Å—Ç–∞
      bash "$TEST_SCRIPT" "$ENV" "${@:3}"
    else
      # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
      bash "$TEST_SCRIPT" "${@:2}"
    fi
    ;;
  interactive)
    # –ó–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
    run_interactive
    ;;
  *)
    print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $COMMAND"
    print_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: env, run, stop, logs, test, interactive"
    exit 1
    ;;
esac

exit 0