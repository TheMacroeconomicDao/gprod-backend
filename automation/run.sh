#!/bin/bash

# ===================================================
# üöÄ GPROD Automation Runner
# ===================================================
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
# 
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./run.sh <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]
#
# –ö–æ–º–∞–Ω–¥—ã:
#   env <dev|stage|prod>  - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
#   run <dev|stage|prod>  - –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞
#   stop <dev|stage|prod> - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞
#   logs <dev|stage|prod> - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç—É—Ä–∞
#   test                  - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
#   help                  - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
  echo -e "\n${WHITE}${BOLD}$1${NC}\n"
}

print_success() {
  echo -e "${GREEN}‚úì $1${NC}"
}

print_error() {
  echo -e "${RED}‚úó $1${NC}"
}

print_info() {
  echo -e "${BLUE}‚Ñπ $1${NC}"
}

print_step() {
  echo -e "${PURPLE}‚Üí $1${NC}"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../" && pwd)"
DOCKER_DIR="$SCRIPT_DIR/docker"
ENV_DIR="$SCRIPT_DIR/env"
SCRIPTS_DIR="$SCRIPT_DIR/scripts"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
show_help() {
  print_header "üöÄ GPROD Automation Runner"
  print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./run.sh <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]"
  print_info "–ö–æ–º–∞–Ω–¥—ã:"
  print_info "  env <dev|stage|prod>  - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  print_info "  run <dev|stage|prod>  - –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞"
  print_info "  stop <dev|stage|prod> - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞"
  print_info "  logs <dev|stage|prod> - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç—É—Ä–∞"
  print_info "  test                  - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
  print_info "  help                  - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"
  print_info "–ü—Ä–∏–º–µ—Ä—ã:"
  print_info "  ./run.sh env dev      - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ development –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  print_info "  ./run.sh run stage    - –∑–∞–ø—É—Å–∫ staging –∫–æ–Ω—Ç—É—Ä–∞"
  print_info "  ./run.sh stop prod    - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ production –∫–æ–Ω—Ç—É—Ä–∞"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [ $# -lt 1 ]; then
  show_help
  exit 1
fi

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
COMMAND=$1
shift

case $COMMAND in
  env)
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ $# -lt 1 ]; then
      print_error "–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç—É—Ä –æ–∫—Ä—É–∂–µ–Ω–∏—è"
      print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./run.sh env <dev|stage|prod>"
      exit 1
    fi
    ENV=$1
    print_header "üåü –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è $ENV"
    bash "$ENV_DIR/env-manager.sh" "$ENV" "$@"
    ;;
  
  run)
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞
    if [ $# -lt 1 ]; then
      print_error "–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç—É—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
      print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./run.sh run <dev|stage|prod>"
      exit 1
    fi
    ENV=$1
    print_header "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞ $ENV"
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ (—Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º)
    bash "$ENV_DIR/env-manager.sh" "$ENV" --silent
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Docker
    bash "$DOCKER_DIR/docker-manager.sh" "$ENV" up
    ;;
  
  stop)
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞
    if [ $# -lt 1 ]; then
      print_error "–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç—É—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
      print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./run.sh stop <dev|stage|prod>"
      exit 1
    fi
    ENV=$1
    print_header "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞ $ENV"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    bash "$DOCKER_DIR/docker-manager.sh" "$ENV" down
    ;;
  
  logs)
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
    if [ $# -lt 1 ]; then
      print_error "–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç—É—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"
      print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./run.sh logs <dev|stage|prod>"
      exit 1
    fi
    ENV=$1
    print_header "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç—É—Ä–∞ $ENV"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
    bash "$DOCKER_DIR/docker-manager.sh" "$ENV" logs
    ;;
  
  test)
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    print_header "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—à —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if [ -f "$SCRIPTS_DIR/run-tests.sh" ]; then
      bash "$SCRIPTS_DIR/run-tests.sh"
    else
      # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
      cd "$PROJECT_ROOT"
      pnpm run test:smart
    fi
    ;;
  
  help)
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
    show_help
    ;;
  
  *)
    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $COMMAND"
    show_help
    exit 1
    ;;
esac

exit 0 