#!/bin/bash

# ===================================================
# üöÄ GPROD Automation Script
# ===================================================
# –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–µ–∫—Ç–∞
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./automation/run.sh <–∫–æ–º–∞–Ω–¥–∞> [–∫–æ–Ω—Ç—É—Ä]
#
# –ö–æ–º–∞–Ω–¥—ã:
#   env   - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
#   run   - –∑–∞–ø—É—Å–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ + –∑–∞–ø—É—Å–∫ Docker)
#   stop  - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
#   logs  - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
#   test  - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
#
# –ö–æ–Ω—Ç—É—Ä—ã:
#   dev, stage, prod, reference

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
  echo -e "\n${WHITE}${BOLD}$1${NC}\n"
}

print_success() {
  echo -e "${GREEN}‚úì $1${NC}"
}

print_error() {
  echo -e "${RED}‚úó $1${NC}"
}

print_info() {
  echo -e "${BLUE}‚Ñπ $1${NC}"
}

print_step() {
  echo -e "${PURPLE}‚Üí $1${NC}"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../" && pwd)"
ENV_MANAGER="$SCRIPT_DIR/env/env-manager.sh"
DOCKER_MANAGER="$PROJECT_ROOT/docker/docker-manager.sh"
TEST_SCRIPT="$SCRIPT_DIR/scripts/run-tests.sh"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [ $# -lt 1 ]; then
  print_header "üöÄ GPROD Automation Script"
  print_error "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞"
  print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./automation/run.sh <–∫–æ–º–∞–Ω–¥–∞> [–∫–æ–Ω—Ç—É—Ä]"
  print_info "–ö–æ–º–∞–Ω–¥—ã: env, run, stop, logs, test"
  print_info "–ö–æ–Ω—Ç—É—Ä—ã: dev, stage, prod, reference"
  exit 1
fi

COMMAND=$1
ENV=${2:-dev}  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º dev

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–ª–∞–≥–∞ --rebuild
REBUILD=false
for arg in "$@"; do
  if [ "$arg" = "--rebuild" ]; then
    REBUILD=true
    break
  fi
done

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
case $COMMAND in
  env)
    print_header "üåü –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è: $ENV"
    bash "$ENV_MANAGER" "$ENV" "$3" "$4"
    ;;
  run)
    print_header "üöÄ –ó–∞–ø—É—Å–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è: $ENV"
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    bash "$ENV_MANAGER" "$ENV" --silent --docker
    
    print_step "–ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ --rebuild
    if [ "$REBUILD" = true ]; then
      print_info "–†–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
      bash "$DOCKER_MANAGER" "$ENV" up --build
    else
      bash "$DOCKER_MANAGER" "$ENV" up
    fi
    ;;
  stop)
    print_header "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è: $ENV"
    bash "$DOCKER_MANAGER" "$ENV" down
    ;;
  logs)
    print_header "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: $ENV"
    bash "$DOCKER_MANAGER" "$ENV" logs
    ;;
  test)
    print_header "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
    if [ "$ENV" = "unit" ] || [ "$ENV" = "e2e" ]; then
      # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Ç–∏–ø —Ç–µ—Å—Ç–∞
      bash "$TEST_SCRIPT" "$ENV" "${@:3}"
    else
      # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
      bash "$TEST_SCRIPT" "${@:2}"
    fi
    ;;
  *)
    print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $COMMAND"
    print_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: env, run, stop, logs, test"
    exit 1
    ;;
esac

exit 0