# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
show_help() {
  common_print_header "üöÄ GPROD Automation Script - –°–ø—Ä–∞–≤–∫–∞"
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./automation/run.sh <–∫–æ–º–∞–Ω–¥–∞> [–∫–æ–Ω—Ç—É—Ä] [–æ–ø—Ü–∏–∏]"
  echo ""
  echo "–ö–æ–º–∞–Ω–¥—ã:"
  echo "  env         - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  echo "  run         - –∑–∞–ø—É—Å–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ + –∑–∞–ø—É—Å–∫ Docker)"
  echo "  stop        - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  echo "  logs        - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
  echo "  test        - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
  echo "  interactive - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞"
  echo ""
  echo "–ö–æ–Ω—Ç—É—Ä—ã:"
  echo "  dev        - –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
  echo "  stage      - –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
  echo "  prod       - –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
  echo "  reference  - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
  echo ""
  echo "–û–ø—Ü–∏–∏:"
  echo "  --build    - –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"
  echo "  --volumes  - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–º–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"
  echo ""
  echo "–ü—Ä–∏–º–µ—Ä—ã:"
  echo "  ./automation/run.sh run dev"
  echo "  ./automation/run.sh run prod --build"
  echo "  ./automation/run.sh stop stage --volumes"
  echo "  ./automation/run.sh interactive"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -eq 0 ]; then
  show_help
  exit 1
fi

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
COMMAND=$1
shift

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã interactive –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Ç—É—Ä–∞
if [ "$COMMAND" = "interactive" ]; then
  run_interactive
  exit $?
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç—É—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
if [ $# -eq 0 ]; then
  common_print_error "–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç—É—Ä"
  show_help
  exit 1
fi

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
ENV=$1
shift
ENV=$(env_validate_env "$ENV")
if [ $? -ne 0 ]; then
  exit 1
fi

# –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
BUILD=false
REMOVE_VOLUMES=false
ADDITIONAL_PARAMS=""

for arg in "$@"; do
  case $arg in
    --build)
      BUILD=true
      ;;
    --volumes)
      REMOVE_VOLUMES=true
      ;;
    *)
      ADDITIONAL_PARAMS="$ADDITIONAL_PARAMS $arg"
      ;;
  esac
shift
done

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
case $COMMAND in
  env)
    common_print_header "üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è $(env_get_full_name $ENV)"
    env_setup "$ENV" "$PROJECT_ROOT" "docker"
    ;;
  run)
    common_print_header "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞ $(env_get_full_name $ENV)"
    env_setup "$ENV" "$PROJECT_ROOT" "docker"
    check_environment_ready "$ENV" "$BUILD"
    docker_compose_up "$ENV" "$PROJECT_ROOT" "$BUILD" "$ADDITIONAL_PARAMS"
    ;;
  stop)
    common_print_header "üì¶ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞ $(env_get_full_name $ENV)"
    docker_compose_down "$ENV" "$PROJECT_ROOT" "$REMOVE_VOLUMES" "$ADDITIONAL_PARAMS"
    ;;
  logs)
    common_print_header "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç—É—Ä–∞ $(env_get_full_name $ENV)"
    docker_compose_logs "$ENV" "$PROJECT_ROOT" "app" true "$ADDITIONAL_PARAMS"
    ;;
  test)
    common_print_header "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—É—Ä–∞ $(env_get_full_name $ENV)"
    env_setup "$ENV" "$PROJECT_ROOT" "docker"
    common_print_step "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    cd "$PROJECT_ROOT" && docker compose -f "$(env_get_compose_file $ENV $PROJECT_ROOT)" exec app npm test
    if [ $? -eq 0 ]; then
      common_print_success "–¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã"
    else
      common_print_error "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
      exit 1
    fi
    ;;
  *)
    common_print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $COMMAND"
    show_help
    exit 1
    ;;
esac

exit 0
