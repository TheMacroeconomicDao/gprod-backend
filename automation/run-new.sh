#!/bin/bash

# ===================================================
# ud83dude80 GPROD Automation Script
# ===================================================
# u0413u043bu0430u0432u043du044bu0439 u0441u043au0440u0438u043fu0442 u0434u043bu044f u0443u043fu0440u0430u0432u043bu0435u043du0438u044f u0430u0432u0442u043eu043cu0430u0442u0438u0437u0430u0446u0438u0435u0439 u043fu0440u043eu0435u043au0442u0430
#
# u0418u0441u043fu043eu043bu044cu0437u043eu0432u0430u043du0438u0435:
#   ./automation/run.sh <u043au043eu043cu0430u043du0434u0430> [u043au043eu043du0442u0443u0440]
#
# u041au043eu043cu0430u043du0434u044b:
#   env         - u043du0430u0441u0442u0440u043eu0439u043au0430 u043eu043au0440u0443u0436u0435u043du0438u044f
#   run         - u0437u0430u043fu0443u0441u043a u043eu043au0440u0443u0436u0435u043du0438u044f (u043du0430u0441u0442u0440u043eu0439u043au0430 + u0437u0430u043fu0443u0441u043a Docker)
#   stop        - u043eu0441u0442u0430u043du043eu0432u043au0430 u043eu043au0440u0443u0436u0435u043du0438u044f
#   logs        - u043fu0440u043eu0441u043cu043eu0442u0440 u043bu043eu0433u043eu0432
#   test        - u0437u0430u043fu0443u0441u043a u0442u0435u0441u0442u043eu0432
#   interactive - u0438u043du0442u0435u0440u0430u043au0442u0438u0432u043du044bu0439 u0440u0435u0436u0438u043c u0437u0430u043fu0443u0441u043au0430
#
# u041au043eu043du0442u0443u0440u044b:
#   dev, stage, prod, reference

# u041fu043eu043bu0443u0447u0435u043du0438u0435 u0434u0438u0440u0435u043au0442u043eu0440u0438u0439
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../" && pwd)"

# u041fu043eu0434u043au043bu044eu0447u0430u0435u043c u0431u0438u0431u043bu0438u043eu0442u0435u043au0438
source "$SCRIPT_DIR/lib/common-lib.sh"
source "$SCRIPT_DIR/lib/env-lib.sh"
source "$SCRIPT_DIR/lib/docker-lib.sh"
source "$SCRIPT_DIR/lib/menu-lib.sh"

# u0424u0430u0439u043b u0434u043bu044f u0445u0440u0430u043du0435u043du0438u044f u0438u0441u0442u043eu0440u0438u0438 u0437u0430u043fu0443u0441u043au043eu0432
HISTORY_FILE="$PROJECT_ROOT/.run_history"

# u0424u0443u043du043au0446u0438u044f u0434u043bu044f u043eu0442u043eu0431u0440u0430u0436u0435u043du0438u044f u043fu0440u043eu0433u0440u0435u0441u0441-u0431u0430u0440u0430
show_progress() {
  local duration=$1
  local step=0.1
  local progress=0
  local width=40
  
  while [ $(echo "$progress < 1" | bc) -eq 1 ]; do
    local filled=$(echo "$progress * $width" | bc | awk '{printf("%d",$1)}')
    local empty=$(echo "$width - $filled" | bc)
    
    printf "\r["
    printf "%${filled}s" | tr ' ' '#'
    printf "%${empty}s" | tr ' ' ' '
    printf "] %.0f%%" "$(echo "$progress * 100" | bc)"
    
    progress=$(echo "$progress + $step" | bc)
    sleep $(echo "$duration * $step" | bc)
  done
  
  printf "\r[%${width}s] 100%%\n" | tr ' ' '#'
}

# u0424u0443u043du043au0446u0438u044f u0434u043bu044f u0441u043eu0445u0440u0430u043du0435u043du0438u044f u0432u044bu0431u043eu0440u0430 u0432 u0438u0441u0442u043eu0440u0438u044e
save_to_history() {
  local env=$1
  local mode=$2
  local rebuild=$3
  
  echo "$env:$mode:$rebuild" > "$HISTORY_FILE"
  common_print_info "u0412u044bu0431u043eu0440 u0441u043eu0445u0440u0430u043du0435u043d u0432 u0438u0441u0442u043eu0440u0438u044e"
}

# u0424u0443u043du043au0446u0438u044f u0434u043bu044f u0437u0430u0433u0440u0443u0437u043au0438 u0438u0441u0442u043eu0440u0438u0438
load_from_history() {
  if [ -f "$HISTORY_FILE" ]; then
    local history=$(cat "$HISTORY_FILE")
    local env=$(echo "$history" | cut -d ':' -f 1)
    local mode=$(echo "$history" | cut -d ':' -f 2)
    local rebuild=$(echo "$history" | cut -d ':' -f 3)
    
    if [ -n "$env" ] && [ -n "$mode" ] && [ -n "$rebuild" ]; then
      common_print_info "u0417u0430u0433u0440u0443u0436u0435u043du043e u0438u0437 u0438u0441u0442u043eu0440u0438u0438: u043au043eu043du0442u0443u0440=$env, u0440u0435u0436u0438u043c=$mode, u043fu0435u0440u0435u0441u0431u043eu0440u043au0430=$rebuild"
      echo "$env:$mode:$rebuild"
      return 0
    fi
  fi
  
  echo "dev:run:false"
  return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç—É—Ä–∞
show_env_menu() {
  local default_env="$1"
  
  common_print_header "üåç –í—ã–±–æ—Ä –∫–æ–Ω—Ç—É—Ä–∞"
  
  local options="dev:–û–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏;stage:–û–∫—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è;prod:–ü—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏–µ;reference:–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
  local selected=$(menu_show "$options" "$default_env")
  
  echo "$selected"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
show_mode_menu() {
  local default_mode="$1"
  
  common_print_header "üöÄ –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞"
  
  local options="run:–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤;stop:–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤;restart:–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤;logs:–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤;status:–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
  local selected=$(menu_show "$options" "$default_mode")
  
  echo "$selected"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
show_rebuild_menu() {
  local default_rebuild="$1"
  
  common_print_header "üîÑ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤"
  
  local options="false:–ë–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏;true:–° –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π –æ–±—Ä–∞–∑–æ–≤"
  local selected=$(menu_show "$options" "$default_rebuild")
  
  echo "$selected"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment_ready() {
  local env="$1"
  local rebuild="$2"
  
  common_print_header "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
  if ! common_check_docker; then
    return 1
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–∞–∑–æ–≤ Docker
  local app_image="gprod-app"
  local app_tag="latest"
  
  # –ï—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–∑–æ–≤
  if [ "$rebuild" != "true" ]; then
    if ! docker_check_image "$app_image" "$app_tag"; then
      common_print_warning "–û–±—Ä–∞–∑ $app_image:$app_tag –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞"
      rebuild="true"
    fi
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–º–æ–≤ Docker
  local node_modules_volume=$(docker_get_volume_name "$env" "node_modules")
  local db_data_volume=$(docker_get_volume_name "$env" "db_data")
  
  # –°–æ–∑–¥–∞–µ–º —Ç–æ–º–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  docker_ensure_volume "$node_modules_volume"
  docker_ensure_volume "$db_data_volume"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è override —Ñ–∞–π–ª–∞
  docker_ensure_override_file "$env" "$PROJECT_ROOT"
  
  common_print_success "–û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É"
  return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
run_interactive() {
  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
  local history=$(load_from_history)
  local default_env=$(echo "$history" | cut -d ':' -f 1)
  local default_mode=$(echo "$history" | cut -d ':' -f 2)
  local default_rebuild=$(echo "$history" | cut -d ':' -f 3)
  
  # –í—ã–±–æ—Ä –∫–æ–Ω—Ç—É—Ä–∞
  local env=$(show_env_menu "$default_env")
  if [ -z "$env" ]; then
    common_print_error "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    return 1
  fi
  
  # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
  local mode=$(show_mode_menu "$default_mode")
  if [ -z "$mode" ]; then
    common_print_error "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    return 1
  fi
  
  # –í—ã–±–æ—Ä –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç
  local rebuild="false"
  if [ "$mode" = "run" ] || [ "$mode" = "restart" ]; then
    rebuild=$(show_rebuild_menu "$default_rebuild")
    if [ -z "$rebuild" ]; then
      common_print_error "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
      return 1
    fi
  fi
  
  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
  save_to_history "$env" "$mode" "$rebuild"
  
  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  env_setup "$env" "$PROJECT_ROOT" "docker"
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å–∫–∞—é—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  if [ "$mode" = "run" ] || [ "$mode" = "restart" ]; then
    check_environment_ready "$env" "$rebuild"
  fi
  
  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  case "$mode" in
    run)
      common_print_header "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞ $(env_get_full_name $env)"
      docker_compose_up "$env" "$PROJECT_ROOT" "$rebuild"
      ;;
    stop)
      common_print_header "üì¶ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞ $(env_get_full_name $env)"
      docker_compose_down "$env" "$PROJECT_ROOT" false
      ;;
    restart)
      common_print_header "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞ $(env_get_full_name $env)"
      docker_compose_down "$env" "$PROJECT_ROOT" false
      docker_compose_up "$env" "$PROJECT_ROOT" "$rebuild"
      ;;
    logs)
      common_print_header "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç—É—Ä–∞ $(env_get_full_name $env)"
      docker_compose_logs "$env" "$PROJECT_ROOT"
      ;;
    status)
      docker_compose_status "$env" "$PROJECT_ROOT"
      ;;
    *)
      common_print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $mode"
      return 1
      ;;
  esac
  
  return 0
}
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
show_help() {
  common_print_header "üöÄ GPROD Automation Script - –°–ø—Ä–∞–≤–∫–∞"
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./automation/run.sh <–∫–æ–º–∞–Ω–¥–∞> [–∫–æ–Ω—Ç—É—Ä] [–æ–ø—Ü–∏–∏]"
  echo ""
  echo "–ö–æ–º–∞–Ω–¥—ã:"
  echo "  env         - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  echo "  run         - –∑–∞–ø—É—Å–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ + –∑–∞–ø—É—Å–∫ Docker)"
  echo "  stop        - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  echo "  logs        - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
  echo "  test        - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
  echo "  interactive - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞"
  echo ""
  echo "–ö–æ–Ω—Ç—É—Ä—ã:"
  echo "  dev        - –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
  echo "  stage      - –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
  echo "  prod       - –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
  echo "  reference  - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
  echo ""
  echo "–û–ø—Ü–∏–∏:"
  echo "  --build    - –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"
  echo "  --volumes  - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–º–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"
  echo ""
  echo "–ü—Ä–∏–º–µ—Ä—ã:"
  echo "  ./automation/run.sh run dev"
  echo "  ./automation/run.sh run prod --build"
  echo "  ./automation/run.sh stop stage --volumes"
  echo "  ./automation/run.sh interactive"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -eq 0 ]; then
  show_help
  exit 1
fi

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
COMMAND=$1
shift

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã interactive –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Ç—É—Ä–∞
if [ "$COMMAND" = "interactive" ]; then
  run_interactive
  exit $?
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç—É—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
if [ $# -eq 0 ]; then
  common_print_error "–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç—É—Ä"
  show_help
  exit 1
fi

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
ENV=$1
shift
ENV=$(env_validate_env "$ENV")
if [ $? -ne 0 ]; then
  exit 1
fi

# –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
BUILD=false
REMOVE_VOLUMES=false
ADDITIONAL_PARAMS=""

for arg in "$@"; do
  case $arg in
    --build)
      BUILD=true
      ;;
    --volumes)
      REMOVE_VOLUMES=true
      ;;
    *)
      ADDITIONAL_PARAMS="$ADDITIONAL_PARAMS $arg"
      ;;
  esac
shift
done

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
case $COMMAND in
  env)
    common_print_header "üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è $(env_get_full_name $ENV)"
    env_setup "$ENV" "$PROJECT_ROOT" "docker"
    ;;
  run)
    common_print_header "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—É—Ä–∞ $(env_get_full_name $ENV)"
    env_setup "$ENV" "$PROJECT_ROOT" "docker"
    check_environment_ready "$ENV" "$BUILD"
    docker_compose_up "$ENV" "$PROJECT_ROOT" "$BUILD" "$ADDITIONAL_PARAMS"
    ;;
  stop)
    common_print_header "üì¶ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞ $(env_get_full_name $ENV)"
    docker_compose_down "$ENV" "$PROJECT_ROOT" "$REMOVE_VOLUMES" "$ADDITIONAL_PARAMS"
    ;;
  logs)
    common_print_header "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç—É—Ä–∞ $(env_get_full_name $ENV)"
    docker_compose_logs "$ENV" "$PROJECT_ROOT" "app" true "$ADDITIONAL_PARAMS"
    ;;
  test)
    common_print_header "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—É—Ä–∞ $(env_get_full_name $ENV)"
    env_setup "$ENV" "$PROJECT_ROOT" "docker"
    common_print_step "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    cd "$PROJECT_ROOT" && docker compose -f "$(env_get_compose_file $ENV $PROJECT_ROOT)" exec app npm test
    if [ $? -eq 0 ]; then
      common_print_success "–¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã"
    else
      common_print_error "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
      exit 1
    fi
    ;;
  *)
    common_print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $COMMAND"
    show_help
    exit 1
    ;;
esac

exit 0
