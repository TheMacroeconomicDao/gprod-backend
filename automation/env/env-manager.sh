#!/bin/bash

# ===================================================
# üåü GPROD Environment Manager
# ===================================================
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç—É—Ä–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# 
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./env-manager.sh <dev|stage|prod> [--silent] [--docker|--local]
#
# –ü—Ä–∏–º–µ—Ä—ã:
#   ./env-manager.sh dev         # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ development
#   ./env-manager.sh stage       # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ staging
#   ./env-manager.sh prod        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ production
#   ./env-manager.sh dev --silent # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
  echo -e "\n${WHITE}${BOLD}$1${NC}\n"
}

print_success() {
  echo -e "${GREEN}‚úì $1${NC}"
}

print_error() {
  echo -e "${RED}‚úó $1${NC}"
}

print_info() {
  echo -e "${BLUE}‚Ñπ $1${NC}"
}

print_step() {
  echo -e "${PURPLE}‚Üí $1${NC}"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../" && pwd)"
DOCKER_DIR="$PROJECT_ROOT/docker"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [ $# -lt 1 ]; then
  print_header "üåü GPROD Environment Manager"
  print_error "–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç—É—Ä –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./env-manager.sh <dev|stage|prod>"
  exit 1
fi

ENV=$1
SILENT_MODE=false
USE_DOCKER=true

# –†–∞–∑–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
shift
while [ "$#" -gt 0 ]; do
  case "$1" in
    --silent)
      SILENT_MODE=true
      ;;
    --docker)
      USE_DOCKER=true
      ;;
    --local)
      USE_DOCKER=false
      ;;
    *)
      print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
      ;;
  esac
  shift
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—É—Ä–∞
case $ENV in
  dev|development)
    ENV_NAME="development"
    ENV_SHORT="dev"
    COMPOSE_FILE="$DOCKER_DIR/docker-compose.dev.yml"
    PORT=3008
    ;;
  stage|staging)
    ENV_NAME="staging"
    ENV_SHORT="stage"
    COMPOSE_FILE="$DOCKER_DIR/docker-compose.stage.yml"
    PORT=3003
    ;;
  prod|production)
    ENV_NAME="production"
    ENV_SHORT="prod"
    COMPOSE_FILE="$DOCKER_DIR/docker-compose.prod.yml"
    PORT=3007
    ;;
  *)
    print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç—É—Ä: $ENV"
    print_info "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Ç—É—Ä—ã: dev, stage, prod"
    exit 1
    ;;
esac

# –§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV_FILE="$PROJECT_ROOT/.env.$ENV_NAME"

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç—É—Ä–µ
print_header "üåü –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è $ENV_NAME"
print_info "–ö–æ–Ω—Ç—É—Ä: $ENV_NAME"
print_info "–§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è: $ENV_FILE"
print_info "Docker Compose —Ñ–∞–π–ª: $COMPOSE_FILE"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ ! -f "$ENV_FILE" ]; then
  print_warning "–§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è $ENV_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
  
  # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞
  if [ -f "$PROJECT_ROOT/.env-templates/.env.$ENV_NAME" ]; then
    print_step "–°–æ–∑–¥–∞–µ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
    cp "$PROJECT_ROOT/.env-templates/.env.$ENV_NAME" "$ENV_FILE"
    print_success "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª $ENV_FILE –∏–∑ —à–∞–±–ª–æ–Ω–∞"
  else
    print_step "–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è
    echo "NODE_ENV=$ENV_NAME" > "$ENV_FILE"
    echo "PORT=$PORT" >> "$ENV_FILE"
    echo "DATABASE_URL=postgresql://postgres:postgres@db:5432/gprod_${ENV_SHORT}" >> "$ENV_FILE"
    echo "JWT_SECRET=${ENV_SHORT}_secret_key" >> "$ENV_FILE"
    echo "RUNNING_IN_DOCKER=true" >> "$ENV_FILE"
    
    print_success "–°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª $ENV_FILE"
  fi
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ .env
print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ .env -> $ENV_FILE..."
ln -sf "$ENV_FILE" "$PROJECT_ROOT/.env"
print_success "–°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ .env —Å–æ–∑–¥–∞–Ω–∞"

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ Docker
if [ "$SILENT_MODE" = false ]; then
  print_info "–ó–∞–ø—É—Å—Ç–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è $ENV_NAME? (y/n)"
  read -p "$(echo -e $YELLOW"–í–∞—à –≤—ã–±–æ—Ä: "$NC)" should_start_docker
  
  if [[ "$should_start_docker" == "y" || "$should_start_docker" == "Y" ]]; then
    USE_DOCKER=true
  else
    USE_DOCKER=false
  fi
fi

# –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
if [ "$USE_DOCKER" = true ]; then
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
  if ! command -v docker &> /dev/null; then
    print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
  fi
  
  if ! docker info &> /dev/null; then
    print_error "Docker –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    exit 1
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ docker-compose
  if [ ! -f "$COMPOSE_FILE" ]; then
    print_warning "–§–∞–π–ª $COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    # –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    if [ -f "$DOCKER_DIR/docker-compose.reference.yml" ]; then
      COMPOSE_FILE="$DOCKER_DIR/docker-compose.reference.yml"
      print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º $COMPOSE_FILE"
    else
      print_error "–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π docker-compose —Ñ–∞–π–ª"
      exit 1
    fi
  fi
  
  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
  print_step "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
  cd "$PROJECT_ROOT"
  docker compose -f "$COMPOSE_FILE" down &> /dev/null
  
  # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  print_step "–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å $COMPOSE_FILE..."
  docker compose -f "$COMPOSE_FILE" up -d
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  if [ $? -eq 0 ]; then
    print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã"
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
    print_header "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
    case $ENV_NAME in
      development)
        print_info "API: http://localhost:$PORT/api/v1"
        print_info "Swagger: http://localhost:$PORT/api/v1/docs"
        ;;
      staging)
        print_info "API: http://localhost:$PORT/api/v1"
        print_info "Swagger: http://localhost:$PORT/api/v1/docs"
        print_info "Prometheus: http://localhost:9090"
        print_info "Grafana: http://localhost:3100"
        ;;
      production)
        print_info "API: http://localhost:$PORT/api/v1"
        print_info "Swagger: http://localhost:$PORT/api/v1/docs"
        print_info "Grafana: http://localhost:3500"
        ;;
    esac
    
    # –í—ã–≤–æ–¥ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    print_step "–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    docker ps --filter "name=gprod-*" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
  else
    print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
  fi
else
  print_info "–ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω"
  print_info "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pnpm run auto:run:$ENV_SHORT"
fi

print_success "–û–∫—Ä—É–∂–µ–Ω–∏–µ $ENV_NAME —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!"
exit 0 