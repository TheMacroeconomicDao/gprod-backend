#!/bin/bash

# ===================================================
# üåü GPROD Environment Switcher Pro
# ===================================================
# –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–Ω—Ç—É—Ä–∞–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –í–µ—Ä—Å–∏—è 2.0
# 
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (MacOS/Linux)
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
# - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ Docker
# - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä docker-compose —Ñ–∞–π–ª–∞
# - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫
# - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# –°–∏–º–≤–æ–ª—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
CHECK_MARK="${GREEN}‚úì${NC}"
CROSS_MARK="${RED}‚úó${NC}"
ARROW="${BLUE}‚Üí${NC}"
STAR="${YELLOW}‚òÖ${NC}"
INFO="${CYAN}‚Ñπ${NC}"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "\n${WHITE}${BOLD}$1${NC}\n"
}

print_subheader() {
    echo -e "\n${CYAN}$1${NC}"
}

print_success() {
    echo -e "${CHECK_MARK} ${GREEN}$1${NC}"
}

print_error() {
    echo -e "${CROSS_MARK} ${RED}$1${NC}"
}

print_warning() {
    echo -e "${STAR} ${YELLOW}$1${NC}"
}

print_info() {
    echo -e "${INFO} ${BLUE}$1${NC}"
}

print_step() {
    echo -e "${ARROW} ${PURPLE}$1${NC}"
}

print_hr() {
    echo -e "${CYAN}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
detect_system() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        OS_TYPE="MacOS"
        SED_INPLACE=("sed" "-i" "")
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS_TYPE="Linux"
        SED_INPLACE=("sed" "-i")
    else
        OS_TYPE="Unknown"
        SED_INPLACE=("sed" "-i")
        print_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°: $OSTYPE. –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Linux."
    fi
    print_info "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ${BOLD}$OS_TYPE${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
check_docker() {
    if command -v docker &> /dev/null; then
        DOCKER_AVAILABLE=true
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Docker –¥–µ–º–æ–Ω
        if docker info &> /dev/null; then
            print_success "Docker –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        else
            print_warning "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            DOCKER_AVAILABLE=false
        fi
    else
        DOCKER_AVAILABLE=false
        print_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
    fi
    
    # Auto-set Docker mode based on availability
    if [ "$USE_DOCKER" = "" ]; then
        USE_DOCKER=$DOCKER_AVAILABLE
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è pnpm
check_pnpm() {
    if command -v pnpm &> /dev/null; then
        PNPM_AVAILABLE=true
        print_success "pnpm –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
    else
        PNPM_AVAILABLE=false
        print_warning "pnpm –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å npm"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ DATABASE_URL –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
adapt_for_mode() {
    local env_file=$1
    local is_docker=$2
    
    if [ ! -f "$env_file" ]; then
        print_error "–§–∞–π–ª $env_file –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return 1
    fi
    
    if [ "$is_docker" = true ]; then
        # –î–ª—è Docker (db:5432)
        print_step "–ê–¥–∞–ø—Ç–∏—Ä—É–µ–º $env_file –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Docker..."
        "${SED_INPLACE[@]}" 's/localhost:5432/db:5432/g' "$env_file"
        "${SED_INPLACE[@]}" 's/RUNNING_IN_DOCKER=false/RUNNING_IN_DOCKER=true/g' "$env_file"
    else
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (localhost:5432)
        print_step "–ê–¥–∞–ø—Ç–∏—Ä—É–µ–º $env_file –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
        "${SED_INPLACE[@]}" 's/db:5432/localhost:5432/g' "$env_file"
        "${SED_INPLACE[@]}" 's/RUNNING_IN_DOCKER=true/RUNNING_IN_DOCKER=false/g' "$env_file"
    fi
    
    # MacOS fix for sed
    if [ "$OS_TYPE" = "MacOS" ]; then
        rm -f "${env_file}.bak" 2>/dev/null
    fi
    
    print_success "–§–∞–π–ª $env_file —É—Å–ø–µ—à–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
ensure_env_file() {
    local env_full=$1
    local env_file=".env.$env_full"
    local template=".env-templates/$env_file"
    
    if [ ! -f "$env_file" ]; then
        print_warning "–§–∞–π–ª $env_file –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if [ -f "$template" ]; then
            print_step "–°–æ–∑–¥–∞–µ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
            cp "$template" "$env_file"
            print_success "–§–∞–π–ª $env_file —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞"
        else
            print_warning "–®–∞–±–ª–æ–Ω $template –Ω–µ –Ω–∞–π–¥–µ–Ω"
            print_step "–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª $env_file..."
            
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π .env —Ñ–∞–π–ª
            echo "NODE_ENV=$env_full" > "$env_file"
            echo "PORT=$(get_default_port $env_full)" >> "$env_file"
            echo "DATABASE_URL=postgresql://postgres:postgres@db:5432/gprod_${env_full}" >> "$env_file"
            echo "JWT_SECRET=${env_full}_secret_key" >> "$env_file"
            echo "RUNNING_IN_DOCKER=$([ "$USE_DOCKER" = true ] && echo "true" || echo "false")" >> "$env_file"
            
            print_success "–°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª $env_file"
            print_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"
        fi
    else
        print_success "–§–∞–π–ª $env_file —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    return 0
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–Ω—Ç—É—Ä–∞
get_default_port() {
    local env=$1
    
    case $env in
        development)
            echo "3008"
            ;;
        staging)
            echo "3003"
            ;;
        production)
            echo "3007"
            ;;
        test)
            echo "3009"
            ;;
        *)
            echo "3000"
            ;;
    esac
}

# –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç –∏–∑ .env —Ñ–∞–π–ª–∞
get_port_from_env() {
    local env_file=$1
    local default_port=$2
    
    if [ -f "$env_file" ]; then
        PORT=$(grep -E "^PORT=" "$env_file" | cut -d '=' -f2)
        if [ -z "$PORT" ]; then
            echo $default_port
        else
            echo $PORT
        fi
    else
        echo $default_port
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ docker compose —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
run_docker_compose() {
    local env=$1
    local compose_file=$2
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if [ ! -f "$compose_file" ]; then
        print_warning "–§–∞–π–ª $compose_file –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        if [ -f "docker-compose.reference.yml" ]; then
            compose_file="docker-compose.reference.yml"
            print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º docker-compose.reference.yml"
        elif [ -f "docker-compose.yml" ]; then
            compose_file="docker-compose.yml"
            print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º docker-compose.yml"
        else
            print_error "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö docker-compose —Ñ–∞–π–ª–æ–≤"
            return 1
        fi
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    print_step "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    docker compose -f "$compose_file" down &> /dev/null
    
    # –ó–∞–ø—É—Å–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
    print_step "–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å $compose_file..."
    docker compose -f "$compose_file" up -d
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if [ $? -eq 0 ]; then
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã"
        return 0
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º
run_local_app() {
    local env=$1
    
    case $env in
        development)
            print_step "–ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
            if [ "$PNPM_AVAILABLE" = true ]; then
                LOGGER_TEST_MODE=true pnpm run start:dev
            else
                LOGGER_TEST_MODE=true npm run start:dev
            fi
            ;;
        staging)
            print_step "–ó–∞–ø—É—Å–∫–∞–µ–º –≤ staging —Ä–µ–∂–∏–º–µ..."
            if [ "$PNPM_AVAILABLE" = true ]; then
                pnpm run start:stage
            else
                npm run start:stage
            fi
            ;;
        production)
            print_step "–ó–∞–ø—É—Å–∫–∞–µ–º –≤ production —Ä–µ–∂–∏–º–µ..."
            if [ "$PNPM_AVAILABLE" = true ]; then
                pnpm run start:prod
            else
                npm run start:prod
            fi
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç—É—Ä: $env"
            return 1
            ;;
    esac
    
    return 0
}

# Check for args parse library (getopt)
check_getopt() {
    if ! getopt --test > /dev/null; then
        GETOPT_COMPATIBLE=0
        print_warning "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º."
    else
        GETOPT_COMPATIBLE=1
        print_success "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞."
    fi
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
print_header "üåü GPROD Environment Switcher Pro"
print_step "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."
detect_system
check_docker
check_pnpm
check_getopt

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
ENV=""
USE_DOCKER=""
SKIP_LAUNCH=false
SILENT_MODE=false

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å getopt
if [ "$GETOPT_COMPATIBLE" = "1" ]; then
    OPTS=$(getopt -o "e:dls" --long "env:,docker,local,skip,silent" -n "$(basename $0)" -- "$@")
    
    if [ $? != 0 ]; then
        print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        exit 1
    fi
    
    eval set -- "$OPTS"
    
    while true; do
        case "$1" in
            -e | --env)
                ENV=$(echo "$2" | tr '[:upper:]' '[:lower:]')
                shift 2
                ;;
            -d | --docker)
                USE_DOCKER=true
                shift
                ;;
            -l | --local)
                USE_DOCKER=false
                shift
                ;;
            -s | --skip)
                SKIP_LAUNCH=true
                shift
                ;;
            --silent)
                SILENT_MODE=true
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                print_error "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"
                exit 1
                ;;
        esac
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if [ -z "$ENV" ] && [ "$#" -gt 0 ]; then
        ENV=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    fi
else
    # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ getopt
    if [ "$#" -gt 0 ]; then
        ENV=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    fi
    
    if [ "$#" -gt 1 ]; then
        if [ "$2" = "--docker" ]; then
            USE_DOCKER=true
        elif [ "$2" = "--local" ]; then
            USE_DOCKER=false
        fi
    fi
fi

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –∫–æ–Ω—Ç—É—Ä –Ω–µ –∑–∞–¥–∞–Ω
if [ -z "$ENV" ]; then
    if [ "$SILENT_MODE" = false ]; then
        print_subheader "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—É—Ä –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
        select env_type in "development" "staging" "production"; do
            case $env_type in
                development|staging|production)
                    ENV=$(echo "$env_type" | tr '[:upper:]' '[:lower:]')
                    break
                    ;;
                *)
                    print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä"
                    ;;
            esac
        done
    else
        # –í —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º development –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ENV="development"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—É—Ä–∞
case $ENV in
    dev|development)
        ENV_FULL="development"
        ENV_SHORT="dev"
        ;;
    stage|staging)
        ENV_FULL="staging"
        ENV_SHORT="stage"
        ;;
    prod|production)
        ENV_FULL="production"
        ENV_SHORT="prod"
        ;;
    *)
        print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç—É—Ä: $ENV"
        print_info "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Ç—É—Ä—ã: development, staging, production"
        exit 1
        ;;
esac

ENV_FILE=".env.${ENV_FULL}"
COMPOSE_FILE="docker-compose.${ENV_SHORT}.yml"

# –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω, –∏ Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
if [ -z "$USE_DOCKER" ]; then
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
    if [ "$DOCKER_AVAILABLE" = true ] && [ "$SILENT_MODE" = false ]; then
        print_subheader "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:"
        select run_mode in "Docker" "–õ–æ–∫–∞–ª—å–Ω–æ"; do
            case $run_mode in
                Docker)
                    USE_DOCKER=true
                    break
                    ;;
                –õ–æ–∫–∞–ª—å–Ω–æ)
                    USE_DOCKER=false
                    break
                    ;;
                *)
                    print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä"
                    ;;
            esac
        done
    elif [ "$DOCKER_AVAILABLE" = true ] && [ "$SILENT_MODE" = true ]; then
        # –í —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Docker, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        USE_DOCKER=true
    else
        USE_DOCKER=false
    fi
fi

# –í—ã–≤–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
print_subheader "üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"
print_info "–ö–æ–Ω—Ç—É—Ä: ${BOLD}$ENV_FULL${NC}"
print_info "–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: ${BOLD}$([ "$USE_DOCKER" = true ] && echo "Docker" || echo "–õ–æ–∫–∞–ª—å–Ω—ã–π")${NC}"
print_info "–§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${BOLD}$ENV_FILE${NC}"
print_info "Docker Compose —Ñ–∞–π–ª: ${BOLD}$COMPOSE_FILE${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
print_subheader "üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
ensure_env_file $ENV_FULL

# –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞..."
adapt_for_mode "$ENV_FILE" "$USE_DOCKER"

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ .env
print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ .env -> $ENV_FILE..."
ln -sf "$ENV_FILE" .env
print_success "–°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ .env —Å–æ–∑–¥–∞–Ω–∞"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
DEFAULT_PORT=$(get_default_port $ENV_FULL)
PORT=$(get_port_from_env "$ENV_FILE" "$DEFAULT_PORT")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ --skip
if [ "$SKIP_LAUNCH" = false ]; then
    print_subheader "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    
    if [ "$USE_DOCKER" = true ]; then
        if [ "$DOCKER_AVAILABLE" = true ]; then
            # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker
            run_docker_compose "$ENV_FULL" "$COMPOSE_FILE"
            
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
            print_subheader "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
            print_info "API: ${BOLD}http://localhost:${PORT}/api/v1${NC}"
            print_info "Swagger: ${BOLD}http://localhost:${PORT}/api/v1/docs${NC}"
            
            # –í—ã–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç—É—Ä–∞
            case $ENV_FULL in
                staging)
                    print_info "Prometheus: ${BOLD}http://localhost:9090${NC}"
                    print_info "Grafana: ${BOLD}http://localhost:3100${NC}"
                    ;;
                production)
                    print_info "Grafana: ${BOLD}http://localhost:3500${NC}"
                    ;;
            esac
            
            # –í—ã–≤–æ–¥ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            print_subheader "üìä –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
            docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Ports}}\t{{.Status}}"
        else
            print_error "Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ Docker"
            print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å —Ñ–ª–∞–≥–æ–º --local"
        fi
    else
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ
        if [ "$SILENT_MODE" = false ]; then
            print_info "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ? (y/n)"
            read -p "$(echo -e $YELLOW"–í–∞—à –≤—ã–±–æ—Ä: "$NC)" should_run
            
            if [[ "$should_run" == "y" || "$should_run" == "Y" ]]; then
                run_local_app "$ENV_FULL"
            else
                print_info "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:"
                print_info "${BOLD}pnpm run start:${ENV_SHORT}${NC}"
            fi
        else
            # –í —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É
            print_info "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ${BOLD}pnpm run start:${ENV_SHORT}${NC}"
        fi
    fi
else
    print_info "–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ñ–ª–∞–≥ --skip)"
fi

print_hr
print_success "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ç—É—Ä ${BOLD}$ENV_FULL${NC} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"

# –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
print_subheader "üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
print_step "–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ: ${BOLD}pnpm run start:${ENV_SHORT}${NC}"
print_step "–ó–∞–ø—É—Å–∫ —Å Docker: ${BOLD}pnpm run docker:reference${NC}"
print_step "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–∞: ${BOLD}pnpm run env:switch:new <dev|stage|prod> [--docker|--local]${NC}"
print_step "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞: ${BOLD}pnpm run api:client:gen${NC}"

exit 0 