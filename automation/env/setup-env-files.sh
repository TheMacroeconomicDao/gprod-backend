#!/bin/bash

# ===================================================
# üåü GPROD Advanced Environment Setup Script
# ===================================================
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ .env —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
# –í–µ—Ä—Å–∏—è 2.1 - —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–µ–ª–∫–∞–º–∏

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# –°–∏–º–≤–æ–ª—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
CHECK_MARK="${GREEN}‚úì${NC}"
CROSS_MARK="${RED}‚úó${NC}"
ARROW="${BLUE}‚Üí${NC}"
STAR="${YELLOW}‚òÖ${NC}"
INFO="${CYAN}‚Ñπ${NC}"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "\n${WHITE}${BOLD}$1${NC}\n"
}

print_subheader() {
    echo -e "\n${CYAN}$1${NC}"
}

print_success() {
    echo -e "${CHECK_MARK} ${GREEN}$1${NC}"
}

print_error() {
    echo -e "${CROSS_MARK} ${RED}$1${NC}"
}

print_warning() {
    echo -e "${STAR} ${YELLOW}$1${NC}"
}

print_info() {
    echo -e "${INFO} ${BLUE}$1${NC}"
}

print_step() {
    echo -e "${ARROW} ${PURPLE}$1${NC}"
}

# –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –≤—ã–±–æ—Ä –æ–ø—Ü–∏–π –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à
simple_select() {
    local title=$1
    shift
    local options=("$@")
    local num_options=${#options[@]}
    local choice
    
    echo -e "${CYAN}${title}${NC}"
    
    for ((i=1; i<=num_options; i++)); do
        echo -e "${GREEN}$i)${NC} ${options[$i-1]}"
    done
    
    while true; do
        read -p "$(echo -e "${BLUE}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-$num_options): ${NC}")" choice
        
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le $num_options ]; then
            return $((choice-1))
        else
            print_error "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ $num_options"
        fi
    done
}

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é —Ñ—É–Ω–∫—Ü–∏—é arrow_select
arrow_select() {
    simple_select "$@"
    return $?
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
detect_system() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        OS_TYPE="MacOS"
        SED_INPLACE=("sed" "-i" "")
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS_TYPE="Linux"
        SED_INPLACE=("sed" "-i")
    else
        OS_TYPE="Unknown"
        SED_INPLACE=("sed" "-i")
    fi
    print_info "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ${BOLD}$OS_TYPE${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
check_docker() {
    if command -v docker &> /dev/null; then
        DOCKER_AVAILABLE=true
        print_success "Docker –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
    else
        DOCKER_AVAILABLE=false
        print_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª–æ–≤
print_header "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ GPROD"
print_step "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤..."
detect_system
check_docker

print_step "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ .env —Ñ–∞–π–ª–æ–≤..."
mkdir -p .env-templates

print_subheader "üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ .env —Ñ–∞–π–ª–æ–≤"

# –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è development
print_step "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è development..."
cat > .env-templates/.env.development << 'EOL'
# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
NODE_ENV=development
PORT=3008

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL=postgresql://postgres:postgres@db:5432/gprod_dev

# JWT –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
JWT_SECRET=dev_jwt_secret_change_me_in_production
JWT_EXPIRES=3600s
JWT_REFRESH_EXPIRES=7d

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=debug
DEBUG=false

# CORS –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
CORS_ENABLED=true
CORS_ORIGIN=http://localhost:3000,http://localhost:5173
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=100

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
APP_NAME=GPROD API (Dev)
APP_VERSION=1.0.0
HOST=localhost
DOMAIN=localhost

# Postgres
POSTGRES_HOST=db
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=gprod_dev

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
LOGGER_TEST_MODE=false
RUNNING_IN_DOCKER=false
EOL
print_success "–®–∞–±–ª–æ–Ω .env.development —Å–æ–∑–¥–∞–Ω"

# –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è staging
print_step "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è staging..."
cat > .env-templates/.env.staging << 'EOL'
# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
NODE_ENV=staging
PORT=3003

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL=postgresql://postgres:postgres@db:5432/gprod_stage

# JWT –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
JWT_SECRET=stage_jwt_secret_change_me_in_production
JWT_EXPIRES=3600s
JWT_REFRESH_EXPIRES=7d

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=info
DEBUG=false

# CORS –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
CORS_ENABLED=true
CORS_ORIGIN=https://stage.gprod.com,https://stage-admin.gprod.com
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=100

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
APP_NAME=GPROD API (Staging)
APP_VERSION=1.0.0
HOST=localhost
DOMAIN=stage.gprod.com

# Postgres
POSTGRES_HOST=db
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=gprod_stage

# Prometheus –∏ Grafana
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=admin

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
LOGGER_TEST_MODE=false
RUNNING_IN_DOCKER=false
EOL
print_success "–®–∞–±–ª–æ–Ω .env.staging —Å–æ–∑–¥–∞–Ω"

# –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è production
print_step "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è production..."
cat > .env-templates/.env.production << 'EOL'
# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
NODE_ENV=production
PORT=3007

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/gprod_prod

# JWT –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
JWT_SECRET=super_secure_jwt_secret_for_production
JWT_EXPIRES=1h
JWT_REFRESH_EXPIRES=30d

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=warn
DEBUG=false

# CORS –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
CORS_ENABLED=true
CORS_ORIGIN=https://gprod.com,https://admin.gprod.com
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=50

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
APP_NAME=GPROD API
APP_VERSION=1.0.0
HOST=api.gprod.com
DOMAIN=gprod.com

# Postgres
POSTGRES_HOST=db
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=prod_secure_password
POSTGRES_DB=gprod_prod

# SSL
SSL_ENABLED=true
SSL_KEY=/etc/ssl/private/gprod.key
SSL_CERT=/etc/ssl/certs/gprod.crt

# Prometheus –∏ Grafana
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=secure_grafana_password

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
LOGGER_TEST_MODE=false
RUNNING_IN_DOCKER=true
EOL
print_success "–®–∞–±–ª–æ–Ω .env.production —Å–æ–∑–¥–∞–Ω"

# –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è test
print_step "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è test..."
cat > .env-templates/.env.test << 'EOL'
# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
NODE_ENV=test
PORT=3009

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL=postgresql://postgres:postgres@db:5432/gprod_test

# JWT –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
JWT_SECRET=test_jwt_secret
JWT_EXPIRES=3600s
JWT_REFRESH_EXPIRES=7d

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=error
DEBUG=false

# CORS –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
CORS_ENABLED=true
CORS_ORIGIN=http://localhost:3000
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=1000

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
APP_NAME=GPROD API (Test)
APP_VERSION=1.0.0
HOST=localhost
DOMAIN=localhost

# Postgres
POSTGRES_HOST=db
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=gprod_test

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤
JEST_TIMEOUT=10000
DISABLE_AUTH=true
DISABLE_RATE_LIMIT=true
DISABLE_CACHE=true

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
LOGGER_TEST_MODE=true
RUNNING_IN_DOCKER=false
EOL
print_success "–®–∞–±–ª–æ–Ω .env.test —Å–æ–∑–¥–∞–Ω"

print_info "–í—Å–µ —à–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .env-templates"

print_subheader "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env* —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ
if ls .env* 1> /dev/null 2>&1; then
    print_warning "–í –ø—Ä–æ–µ–∫—Ç–µ —É–∂–µ –µ—Å—Ç—å .env —Ñ–∞–π–ª—ã:"
    ls -la .env* | grep -v "\.env-templates"
    
    options=("–î–∞" "–ù–µ—Ç")
    simple_select "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ .env —Ñ–∞–π–ª—ã?" "${options[@]}"
    overwrite=$?
    
    if [ $overwrite -ne 0 ]; then
        print_info "C–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ .env —Ñ–∞–π–ª—ã."
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–∏–º–ª–∏–Ω–∫ .env
        if [ -L ".env" ]; then
            ENV_TARGET=$(readlink .env)
            print_info "–¢–µ–∫—É—â–∏–π .env —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–ª–∏–Ω–∫–æ–º –Ω–∞ $ENV_TARGET"
        elif [ -f ".env" ]; then
            print_warning ".env —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ñ–∞–π–ª–æ–º, –∞ –Ω–µ —Å–∏–º–ª–∏–Ω–∫–æ–º"
        else
            print_warning ".env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
        exit 0
    fi
fi

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∫–æ–Ω—Ç—É—Ä —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
options=("development" "staging" "production" "test" "–≤—Å–µ –∫–æ–Ω—Ç—É—Ä—ã")
simple_select "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—É—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:" "${options[@]}"
env_type=$?

case $env_type in
    0)
        DEFAULT_ENV="development"
        ENV_FILE=".env.development"
        ENV_FILES=("development")
        ;;
    1)
        DEFAULT_ENV="staging"
        ENV_FILE=".env.staging"
        ENV_FILES=("staging")
        ;;
    2)
        DEFAULT_ENV="production"
        ENV_FILE=".env.production"
        ENV_FILES=("production")
        ;;
    3)
        DEFAULT_ENV="test"
        ENV_FILE=".env.test"
        ENV_FILES=("test")
        ;;
    4)
        DEFAULT_ENV="development"
        ENV_FILE=".env.development"
        ENV_FILES=("development" "staging" "production" "test")
        ;;
esac

# –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤
for env in "${ENV_FILES[@]}"; do
    src=".env-templates/.env.${env}"
    dest=".env.${env}"
    
    if [ -f "$src" ]; then
        cp "$src" "$dest"
        print_success "–§–∞–π–ª $dest —Å–æ–∑–¥–∞–Ω"
    else
        print_error "–®–∞–±–ª–æ–Ω $src –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
done

# –°–æ–∑–¥–∞–µ–º —Å–∏–º–ª–∏–Ω–∫ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
ln -sf "$ENV_FILE" .env
print_success "–§–∞–π–ª .env —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Å–∏–º–ª–∏–Ω–∫ –Ω–∞ $ENV_FILE"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
if [ "$DOCKER_AVAILABLE" = true ]; then
    options=("Docker" "–õ–æ–∫–∞–ª—å–Ω–æ")
    arrow_select "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:" "${options[@]}"
    run_mode=$?
    
    if [ $run_mode -eq 0 ]; then
        USE_DOCKER=true
    else
        USE_DOCKER=false
    fi
else
    USE_DOCKER=false
fi

# –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
for env_file in .env.development .env.staging .env.production .env.test; do
    if [ -f "$env_file" ]; then
        if [ "$USE_DOCKER" = true ]; then
            # –î–ª—è Docker (db:5432)
            "${SED_INPLACE[@]}" 's/localhost:5432/db:5432/g' "$env_file"
            "${SED_INPLACE[@]}" 's/RUNNING_IN_DOCKER=false/RUNNING_IN_DOCKER=true/g' "$env_file"
            print_success "–§–∞–π–ª $env_file –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è Docker"
        else
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (localhost:5432)
            "${SED_INPLACE[@]}" 's/db:5432/localhost:5432/g' "$env_file"
            "${SED_INPLACE[@]}" 's/RUNNING_IN_DOCKER=true/RUNNING_IN_DOCKER=false/g' "$env_file"
            print_success "–§–∞–π–ª $env_file –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        fi
        
        # MacOS fix for sed
        if [ "$OS_TYPE" = "MacOS" ]; then
            rm -f "${env_file}.bak" 2>/dev/null
        fi
    fi
done

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
print_subheader "üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
options=("–î–∞" "–ù–µ—Ç")
arrow_select "–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è $ENV_FILE?" "${options[@]}"
customize=$?

if [ $customize -eq 0 ]; then
    # –ü–æ—Ä—Ç
    read -p "$(echo -e $BLUE"–ü–æ—Ä—Ç –¥–ª—è API (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): "$NC)" custom_port
    if [ ! -z "$custom_port" ]; then
        "${SED_INPLACE[@]}" "s/PORT=[0-9]*/PORT=$custom_port/" "$ENV_FILE"
        print_success "–ü–æ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $custom_port"
    fi
    
    # JWT Secret
    read -p "$(echo -e $BLUE"JWT Secret (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): "$NC)" custom_jwt
    if [ ! -z "$custom_jwt" ]; then
        "${SED_INPLACE[@]}" "s/JWT_SECRET=.*/JWT_SECRET=$custom_jwt/" "$ENV_FILE"
        print_success "JWT Secret –æ–±–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
    options=("–î–∞" "–ù–µ—Ç")
    arrow_select "–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏?" "${options[@]}"
    debug_mode=$?
    
    if [ $debug_mode -eq 0 ]; then
        "${SED_INPLACE[@]}" "s/DEBUG=false/DEBUG=true/" "$ENV_FILE"
        print_success "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω"
    else
        "${SED_INPLACE[@]}" "s/DEBUG=true/DEBUG=false/" "$ENV_FILE"
        print_success "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω"
    fi
    
    # MacOS fix for sed
    if [ "$OS_TYPE" = "MacOS" ]; then
        rm -f "${ENV_FILE}.bak" 2>/dev/null
    fi
else
    print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
fi

print_header "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
print_info "–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç—É—Ä: ${BOLD}$DEFAULT_ENV${NC}"
print_info "–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: ${BOLD}$([ "$USE_DOCKER" = true ] && echo "Docker" || echo "–õ–æ–∫–∞–ª—å–Ω—ã–π")${NC}"
print_info "–û—Å–Ω–æ–≤–Ω–æ–π .env —Ñ–∞–π–ª: ${BOLD}$ENV_FILE${NC}"

print_subheader "üöÄ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
print_step "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${BOLD}pnpm run start:dev${NC}"
print_step "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å Docker: ${BOLD}pnpm run docker:reference${NC}"
print_step "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç—É—Ä: ${BOLD}pnpm run env:switch:new <dev|stage|prod> [--docker|--local]${NC}"

# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
print_subheader "üèÉ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"
options=("–î–∞" "–ù–µ—Ç")
arrow_select "–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–µ–π—á–∞—Å?" "${options[@]}"
should_run=$?

if [ $should_run -eq 0 ]; then
    if [ "$USE_DOCKER" = true ]; then
        print_info "–ó–∞–ø—É—Å–∫–∞–µ–º —Å Docker..."
        if [ -f "docker-compose.reference.yml" ]; then
            docker compose -f docker-compose.reference.yml up -d
        else
            print_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ docker/"
            if [ -f "docker/docker-compose.reference.yml" ]; then
                docker compose -f docker/docker-compose.reference.yml up -d
            else
                print_error "–§–∞–π–ª docker-compose.reference.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
        fi
    else
        print_info "–ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ..."
        case $DEFAULT_ENV in
            development)
                LOGGER_TEST_MODE=true pnpm run start:dev
                ;;
            staging)
                pnpm run start:stage
                ;;
            production)
                pnpm run start:prod
                ;;
            test)
                pnpm run test:smart
                ;;
        esac
    fi
fi 