#!/bin/bash

# ===================================================
# üöÄ GPROD Environment Runner
# ===================================================
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# 
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./run-env.sh <dev|stage|prod> [--build] [--logs] [--stop]
#
# –ü—Ä–∏–º–µ—Ä—ã:
#   ./run-env.sh dev         # –ó–∞–ø—É—Å–∫–∞–µ—Ç development –æ–∫—Ä—É–∂–µ–Ω–∏–µ
#   ./run-env.sh stage       # –ó–∞–ø—É—Å–∫–∞–µ—Ç staging –æ–∫—Ä—É–∂–µ–Ω–∏–µ
#   ./run-env.sh prod        # –ó–∞–ø—É—Å–∫–∞–µ—Ç production –æ–∫—Ä—É–∂–µ–Ω–∏–µ
#   ./run-env.sh dev --build # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç development
#   ./run-env.sh dev --logs  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ development –æ–∫—Ä—É–∂–µ–Ω–∏—è
#   ./run-env.sh dev --stop  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç development –æ–∫—Ä—É–∂–µ–Ω–∏–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
  echo -e "\n${WHITE}${BOLD}$1${NC}\n"
}

print_success() {
  echo -e "${GREEN}‚úì $1${NC}"
}

print_error() {
  echo -e "${RED}‚úó $1${NC}"
}

print_info() {
  echo -e "${BLUE}‚Ñπ $1${NC}"
}

print_step() {
  echo -e "${PURPLE}‚Üí $1${NC}"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../" && pwd)"
DOCKER_DIR="$PROJECT_ROOT/automation/docker"
ENV_DIR="$PROJECT_ROOT/automation/env"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [ $# -lt 1 ]; then
  print_header "üöÄ GPROD Environment Runner"
  print_error "–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç—É—Ä –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./run-env.sh <dev|stage|prod> [--build] [--logs] [--stop]"
  print_info "–ü—Ä–∏–º–µ—Ä—ã:"
  print_info "  ./run-env.sh dev         # –ó–∞–ø—É—Å–∫–∞–µ—Ç development –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
  print_info "  ./run-env.sh stage       # –ó–∞–ø—É—Å–∫–∞–µ—Ç staging –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
  print_info "  ./run-env.sh prod        # –ó–∞–ø—É—Å–∫–∞–µ—Ç production –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
  print_info "  ./run-env.sh dev --build # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç development"
  exit 1
fi

ENV=$1
BUILD=false
LOGS=false
STOP=false

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
for param in "${@:2}"; do
  case $param in
    --build)
      BUILD=true
      ;;
    --logs)
      LOGS=true
      ;;
    --stop)
      STOP=true
      ;;
  esac
done

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–∞
case $ENV in
  dev|development)
    ENV_NAME="development"
    COMPOSE_FILE="$DOCKER_DIR/docker-compose.dev.yml"
    ENV_FILE="$PROJECT_ROOT/.env.development"
    PORT=3008
    ;;
  stage|staging)
    ENV_NAME="staging"
    COMPOSE_FILE="$DOCKER_DIR/docker-compose.stage.yml"
    ENV_FILE="$PROJECT_ROOT/.env.staging"
    PORT=3003
    ;;
  prod|production)
    ENV_NAME="production"
    COMPOSE_FILE="$DOCKER_DIR/docker-compose.prod.yml"
    ENV_FILE="$PROJECT_ROOT/.env.production"
    PORT=3007
    ;;
  *)
    print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç—É—Ä: $ENV"
    print_info "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Ç—É—Ä—ã: dev, stage, prod"
    exit 1
    ;;
esac

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
if ! command -v docker &> /dev/null; then
  print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
  exit 1
fi

if ! docker info &> /dev/null; then
  print_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"
  exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è docker-compose —Ñ–∞–π–ª–∞
if [ ! -f "$COMPOSE_FILE" ]; then
  print_error "–ù–µ –Ω–∞–π–¥–µ–Ω docker-compose —Ñ–∞–π–ª: $COMPOSE_FILE"
  print_step "–ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
  
  # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑ –∏–º–µ—é—â–µ–≥–æ—Å—è —à–∞–±–ª–æ–Ω–∞ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º
  if [ -f "$DOCKER_DIR/docker-compose.dev.yml" ]; then
    cp "$DOCKER_DIR/docker-compose.dev.yml" "$COMPOSE_FILE"
    print_success "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª $COMPOSE_FILE –∏–∑ —à–∞–±–ª–æ–Ω–∞"
    
    # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞
    sed -i.bak "s/gprod-db-dev/gprod-db-$ENV/g" "$COMPOSE_FILE"
    sed -i.bak "s/gprod-app-dev/gprod-app-$ENV/g" "$COMPOSE_FILE"
    sed -i.bak "s/gprod_dev/gprod_$ENV/g" "$COMPOSE_FILE"
    sed -i.bak "s/'3008:3000'/'$PORT:3000'/g" "$COMPOSE_FILE"
    sed -i.bak "s/development/$ENV_NAME/g" "$COMPOSE_FILE"
    rm -f "$COMPOSE_FILE.bak"
  else
    print_error "–ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω docker-compose —Ñ–∞–π–ª–∞"
    exit 1
  fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
if [ ! -f "$ENV_FILE" ]; then
  print_error "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è: $ENV_FILE"
  print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏/env/setup-env.sh –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ .env
ln -sf "$ENV_FILE" "$PROJECT_ROOT/.env"
print_success "–°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ .env -> $ENV_FILE —Å–æ–∑–¥–∞–Ω–∞"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞
if [ "$STOP" = true ]; then
  COMMAND="down"
  ACTION="–û—Å—Ç–∞–Ω–æ–≤–∫–∞"
elif [ "$LOGS" = true ]; then
  COMMAND="logs -f"
  ACTION="–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
elif [ "$BUILD" = true ]; then
  COMMAND="up -d --build"
  ACTION="–ó–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π"
else
  COMMAND="up -d"
  ACTION="–ó–∞–ø—É—Å–∫"
fi

# –ó–∞–ø—É—Å–∫ docker-compose
print_header "üöÄ $ACTION –∫–æ–Ω—Ç—É—Ä–∞ $ENV_NAME"
print_step "–ö–æ–º–∞–Ω–¥–∞: docker compose -f $COMPOSE_FILE $COMMAND"

cd "$PROJECT_ROOT"
docker compose -f "$COMPOSE_FILE" $COMMAND

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
if [ $? -eq 0 ]; then
  if [ "$STOP" != true ] && [ "$LOGS" != true ]; then
    print_success "–ö–æ–Ω—Ç—É—Ä $ENV_NAME —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
    print_info "API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:$PORT/api/v1"
    print_info "Swagger: http://localhost:$PORT/api/v1/docs"
    
    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞
    print_step "–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    docker ps --filter "name=gprod-*-$ENV" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
  elif [ "$STOP" = true ]; then
    print_success "–ö–æ–Ω—Ç—É—Ä $ENV_NAME —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
  fi
else
  print_error "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã docker compose"
fi

exit 0 