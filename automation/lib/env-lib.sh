#!/bin/bash

# ===================================================
# üåü GPROD Environment Library
# ===================================================
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   source ./automation/lib/env-lib.sh

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—â—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
if [ -z "$COMMON_NC" ]; then
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  source "$SCRIPT_DIR/common-lib.sh"
fi

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—É—Ä–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV_DEV="dev"
ENV_STAGE="stage"
ENV_PROD="prod"
ENV_REFERENCE="reference"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—É—Ä–∞
env_validate_env() {
  local env=$1
  
  case $env in
    $ENV_DEV|development)
      echo "$ENV_DEV"
      return 0
      ;;
    $ENV_STAGE|staging)
      echo "$ENV_STAGE"
      return 0
      ;;
    $ENV_PROD|production)
      echo "$ENV_PROD"
      return 0
      ;;
    $ENV_REFERENCE)
      echo "$ENV_REFERENCE"
      return 0
      ;;
    *)
      common_print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç—É—Ä: $env"
      common_print_info "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Ç—É—Ä—ã: $ENV_DEV, $ENV_STAGE, $ENV_PROD, $ENV_REFERENCE"
      return 1
      ;;
  esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç—É—Ä–∞
env_get_full_name() {
  local env=$1
  
  case $env in
    $ENV_DEV)
      echo "development"
      ;;
    $ENV_STAGE)
      echo "staging"
      ;;
    $ENV_PROD)
      echo "production"
      ;;
    $ENV_REFERENCE)
      echo "reference"
      ;;
    *)
      echo "unknown"
      ;;
  esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–Ω—Ç—É—Ä–∞
env_get_default_port() {
  local env=$1
  
  case $env in
    $ENV_DEV)
      echo "3008"
      ;;
    $ENV_STAGE)
      echo "3003"
      ;;
    $ENV_PROD)
      echo "3007"
      ;;
    $ENV_REFERENCE)
      echo "3000"
      ;;
    *)
      echo "3000"
      ;;
  esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É docker-compose –¥–ª—è –∫–æ–Ω—Ç—É—Ä–∞
env_get_compose_file() {
  local env=$1
  local project_root=$2
  
  case $env in
    $ENV_DEV)
      echo "$project_root/docker/docker-compose.dev.yml"
      ;;
    $ENV_STAGE)
      echo "$project_root/docker/docker-compose.stage.yml"
      ;;
    $ENV_PROD)
      echo "$project_root/docker/docker-compose.prod.yml"
      ;;
    $ENV_REFERENCE)
      echo "$project_root/docker/docker-compose.reference.yml"
      ;;
    *)
      echo ""
      ;;
  esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_get_env_file() {
  local env=$1
  local project_root=$2
  local env_full=$(env_get_full_name "$env")
  
  echo "$project_root/.env.$env_full"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_ensure_env_file() {
  local env=$1
  local project_root=$2
  local env_file=$(env_get_env_file "$env" "$project_root")
  local env_full=$(env_get_full_name "$env")
  local port=$(env_get_default_port "$env")
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if [ ! -f "$env_file" ]; then
    common_print_warning "–§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è $env_file –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞
    if [ -f "$project_root/.env-templates/.env.$env_full" ]; then
      common_print_step "–°–æ–∑–¥–∞–µ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
      cp "$project_root/.env-templates/.env.$env_full" "$env_file"
      common_print_success "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª $env_file –∏–∑ —à–∞–±–ª–æ–Ω–∞"
    else
      common_print_step "–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
      
      # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è
      echo "NODE_ENV=$env_full" > "$env_file"
      echo "PORT=$port" >> "$env_file"
      echo "DATABASE_URL=postgresql://postgres:postgres@db:5432/gprod_${env}" >> "$env_file"
      echo "JWT_SECRET=${env}_secret_key" >> "$env_file"
      echo "RUNNING_IN_DOCKER=true" >> "$env_file"
      
      common_print_success "–°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª $env_file"
    fi
  fi
  
  return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ .env
env_create_symlink() {
  local env=$1
  local project_root=$2
  local env_file=$(env_get_env_file "$env" "$project_root")
  
  common_print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ .env -> $env_file..."
  ln -sf "$env_file" "$project_root/.env"
  common_print_success "–°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ .env —Å–æ–∑–¥–∞–Ω–∞"
  
  return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Docker –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
env_adapt_for_mode() {
  local env=$1
  local project_root=$2
  local mode=$3 # docker –∏–ª–∏ local
  local env_file=$(env_get_env_file "$env" "$project_root")
  
  if [ ! -f "$env_file" ]; then
    common_print_error "–§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è $env_file –Ω–µ –Ω–∞–π–¥–µ–Ω"
    return 1
  fi
  
  common_print_step "–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ $mode..."
  
  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è sed
  local system=$(common_detect_system)
  local sed_inplace=()
  
  if [ "$system" = "macos" ]; then
    sed_inplace=(sed -i "")
  else
    sed_inplace=(sed -i)
  fi
  
  if [ "$mode" = "docker" ]; then
    # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è Docker
    "${sed_inplace[@]}" 's/RUNNING_IN_DOCKER=.*/RUNNING_IN_DOCKER=true/' "$env_file"
    "${sed_inplace[@]}" 's|DATABASE_URL=.*|DATABASE_URL=postgresql://postgres:postgres@db:5432/gprod_'"$env"'|' "$env_file"
  else
    # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    "${sed_inplace[@]}" 's/RUNNING_IN_DOCKER=.*/RUNNING_IN_DOCKER=false/' "$env_file"
    "${sed_inplace[@]}" 's|DATABASE_URL=.*|DATABASE_URL=postgresql://postgres:postgres@localhost:5432/gprod_'"$env"'|' "$env_file"
  fi
  
  common_print_success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ $mode"
  return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_setup() {
  local env=$1
  local project_root=$2
  local mode=${3:-docker} # docker –∏–ª–∏ local
  local silent=${4:-false}
  
  # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç—É—Ä–∞
  env=$(env_validate_env "$env")
  if [ $? -ne 0 ]; then
    return 1
  fi
  
  # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç—É—Ä–µ
  if [ "$silent" != "true" ]; then
    common_print_header "üåü –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è $(env_get_full_name $env)"
    common_print_info "–ö–æ–Ω—Ç—É—Ä: $(env_get_full_name $env)"
    common_print_info "–†–µ–∂–∏–º: $mode"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  env_ensure_env_file "$env" "$project_root"
  
  # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
  env_create_symlink "$env" "$project_root"
  
  # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  env_adapt_for_mode "$env" "$project_root" "$mode"
  
  if [ "$silent" != "true" ]; then
    common_print_success "–û–∫—Ä—É–∂–µ–Ω–∏–µ $(env_get_full_name $env) –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ $mode"
  fi
  
  return 0
}

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
export -f env_validate_env env_get_full_name env_get_default_port env_get_compose_file
export -f env_get_env_file env_ensure_env_file env_create_symlink env_adapt_for_mode env_setup
