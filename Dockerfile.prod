# Этап 1: Сборка приложения
FROM node:20-alpine AS builder
WORKDIR /app
COPY package*.json ./
COPY pnpm-lock.yaml ./

# Установка зависимостей
RUN npm install -g pnpm && \
    pnpm install --frozen-lockfile --prod=false

# Копирование исходного кода
COPY . .

# Генерация клиента Prisma
RUN npx prisma generate

# Сборка приложения
RUN pnpm run build

# Генерируем build-info.json
RUN apk add --no-cache git && \
    node -e "const { execSync } = require('child_process'); const fs = require('fs'); const pkg = require('./package.json'); let gitHash = 'unknown'; try { gitHash = execSync('git rev-parse --short HEAD').toString().trim(); } catch (e) {} fs.writeFileSync('./build-info.json', JSON.stringify({ name: pkg.name, version: pkg.version, buildTime: new Date().toISOString(), gitHash, env: process.env.NODE_ENV || 'production' }, null, 2));"

# Этап 2: Создание продакшен-образа
FROM node:20-alpine AS production
WORKDIR /app

# Установка только необходимых утилит
RUN apk add --no-cache postgresql-client dumb-init

# Установка pnpm
RUN npm install -g pnpm

# Копирование файлов package.json и lock-файлов
COPY --from=builder /app/package.json /app/
COPY --from=builder /app/pnpm-lock.yaml /app/

# Копирование собранного приложения
COPY --from=builder /app/dist /app/dist
COPY --from=builder /app/build-info.json /app/
COPY --from=builder /app/node_modules /app/node_modules
COPY --from=builder /app/prisma /app/prisma

# Копирование необходимых скриптов
COPY docker-entrypoint.sh /app/docker-entrypoint.sh
RUN chmod +x /app/docker-entrypoint.sh

# Пользователь без прав root для безопасности
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
RUN chown -R appuser:appgroup /app
USER appuser

# Настройка переменных окружения
ENV NODE_ENV=production
ENV PORT=3000

# Объявление порта
EXPOSE 3000

# Запуск через dumb-init для правильной обработки сигналов
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["sh", "/app/docker-entrypoint.sh"] 